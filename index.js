export class ConfirmationBox {
    constructor(message, yesText, noText) {
        this.message = message
        this.yesText = yesText
        this.noText = noText
        
        const styleTag = document.createElement('style')
        const css = " /* ---------------------------------------------- * Generated by Animista on 2021-2-6 1:2:29 * Licensed under FreeBSD License. * See http://animista.net/license for more info. * w: http://animista.net, t: @cssanimista * ---------------------------------------------- */ /** * ---------------------------------------- * animation scale-in-hor-center * ---------------------------------------- */ @import url(\"https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&display=swap\"); @keyframes scale-in-hor-center { 0% { transform: scale(0) translate(-50%, -50%); transform-origin: left top; opacity: 0; } 100% { transform: scale(1) translate(-50%, -50%); transform-origin: left top; opacity: 1; } } @keyframes scale-out-hor-center { 0% { transform: scale(1) translate(-50%, -50%); transform-origin: left top; opacity: 1; } 100% { transform: scale(0) translate(-50%, -50%); transform-origin: left top; opacity: 0; } } .message-box-container { font-family: \"Source Sans Pro\", sans-serif; font-weight: 600; top: 50%; left: 50%; transform: translate(-50%, -50%); position: fixed; width: 17rem; border-radius: 1.5rem; backdrop-filter: blur(10px); display: flex; flex-direction: column; box-shadow: 0px 0px 43px -12px rgba(184, 184, 184, 0.75); background: rgba(255, 255, 255, 0.541); overflow: hidden; z-index: 9999; pointer-events: all; animation: scale-in-hor-center 0.5s cubic-bezier(0.42, 0, 0, 1.2) both; } .message-out { animation: scale-out-hor-center 0.5s cubic-bezier(0.42, 0, 0, 1.2) both; } .message-box-container .upper p { text-align: center; } .message-box-container .upper { display: flex; justify-content: center; align-items: center; } .message-box-container .lower { display: flex; flex-direction: row; justify-content: space-between; align-items: flex-end; height: 4rem; } .message-box-container .lower button { position: absolute; border: none; border-radius: 0.5rem 0.5rem 1.5rem 0.5rem; height: 3.5rem; padding: 1rem; color: white; width: 7.75rem; } .message-box-container .lower button.reject { background: rgb(255, 0, 0); left: 0.5rem; bottom: 0.5rem; border-radius: 0.5rem 0.5rem 0.5rem 1.5rem; } .message-box-container .lower button.confirm { background: rgb(22, 122, 253); right: 0.5rem; bottom: 0.5rem; border-radius: 0.5rem 0.5rem 1.5rem 0.5rem; }"
        styleTag.innerHTML=css
        document.head.appendChild(styleTag)
    }

    createPopUp() {
        //Create pop-up
        // const fullCover = document.createElement('div')
        // fullCover.classList.add('full-cover')
        const messageElement = document.createElement('div')
        messageElement.classList.add('message-box-container')
        //Upper
        const upperElement = document.createElement('div')
        upperElement.classList.add('upper')
        //Paragraph
        const paragraph = document.createElement('p')
        paragraph.innerText=this.message
        //Append
        upperElement.appendChild(paragraph)
    
        //Lower
        const lowerElement = document.createElement('div')
        lowerElement.classList.add('lower')
        //Reject button
        const rejectButton = document.createElement('button')
        rejectButton.classList.add('button')
        rejectButton.classList.add('reject')
        rejectButton.classList.add('press-bounce')
        rejectButton.innerText=this.noText
        //Confirm button
        const confirmButton = document.createElement('button')
        confirmButton.classList.add('button')
        confirmButton.classList.add('confirm')
        confirmButton.classList.add('press-bounce')
        confirmButton.innerText=this.yesText
        //Append 
        lowerElement.appendChild(rejectButton)
        lowerElement.appendChild(confirmButton)
        
        messageElement.appendChild(upperElement)
        messageElement.appendChild(lowerElement)
    
        // fullCover.appendChild(messageElement)
        document.body.appendChild(messageElement)
    
        
        return new Promise((resolve, reject)=>{
            const handleResolve = () => {
                resolve('User pressed ok')
                messageElement.classList.add('message-out')
                setTimeout(() => {
                    messageElement.remove()
                }, 500);

            }
            const handleReject = () => {
                reject('User did not press ok')
                messageElement.classList.add('message-out')
                setTimeout(() => {
                    messageElement.remove()
                }, 500);
            }

            rejectButton.addEventListener('click', handleReject)
            window.addEventListener('keydown', (e)=>{
                if(e.key === "Enter") {
                    e.preventDefault()
                    handleReject()
                }
            })
            confirmButton.addEventListener('click', handleResolve)
        })
    }
}
export default ConfirmationBox